import os
import json
import time
from pinecone import Pinecone
from dotenv import load_dotenv
from langchain_openai import OpenAIEmbeddings

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pinecone
pc = Pinecone(api_key=os.getenv("PINECONE_API_KEY"))

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–¥–µ–∫—Å–∞
INDEX_NAME = "posts-text-index"
DIMENSION = 1536

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
index = pc.Index(INDEX_NAME)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
openai_api_key = os.getenv("OPENAI_API_KEY")
embed_model = OpenAIEmbeddings(
    model="text-embedding-3-small",
    dimensions=DIMENSION,
    openai_api_key=openai_api_key
)


# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
def deep_clean_metadata(metadata):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—á–∏—â–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:
    - –ó–∞–º–µ–Ω—è–µ—Ç None –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    - –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–∫–∏ –≤ —Å—Ç—Ä–æ–∫–∏
    - –£–¥–∞–ª—è–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    """
    cleaned = {}
    for key, value in metadata.items():
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ None –∑–Ω–∞—á–µ–Ω–∏–π
        if value is None:
            cleaned[key] = ""
            continue

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤
        if isinstance(value, list):
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è None –≤ —Å–ø–∏—Å–∫–∞—Ö
            filtered_list = [item for item in value if item is not None]
            cleaned[key] = ",".join(str(item) for item in filtered_list)
            continue

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π (–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã –≤ Pinecone)
        if isinstance(value, dict):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ —Å—Ç—Ä–æ–∫—É JSON
            cleaned[key] = json.dumps(value)
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ç–∏–ø–æ–≤
        if not isinstance(value, (str, int, float, bool)):
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫—É
                cleaned[key] = str(value)
            except:
                cleaned[key] = ""
            continue

        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        cleaned[key] = value

    return cleaned


# –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
def load_processed_posts():
    try:
        with open('output_vector.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return []


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
def validate_metadata(metadata):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º Pinecone"""
    for key, value in metadata.items():
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∑–Ω–∞—á–µ–Ω–∏—è
        if not isinstance(value, (str, int, float, bool)) and not (
                isinstance(value, list) and all(isinstance(item, str) for item in value)):
            print(f"‚ö†Ô∏è –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –¥–ª—è –ø–æ–ª—è '{key}': {type(value)}")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
        if value is None:
            print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ None –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{key}'")
            return False

    return True


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    processed_posts = load_processed_posts()
    if not processed_posts:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(processed_posts)}")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    vectors_to_upsert = []
    error_count = 0

    for post in processed_posts:
        post_id = post["id"]
        text = post["text"]

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        try:
            embedding = embed_model.embed_query(text)
            if len(embedding) != DIMENSION:
                print(f"‚ö†Ô∏è –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ ({len(embedding)}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±—É–µ–º–æ–π ({DIMENSION})")
                continue
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}: {str(e)}")
            continue

        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {
            "post_id": post_id,
            "text": text[:500] + "..." if len(text) > 500 else text
        }

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å –≥–ª—É–±–æ–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π
        if "metadata" in post:
            metadata.update(deep_clean_metadata(post["metadata"]))

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª–µ–π
        for field in ["activity_type", "sentiment", "location"]:
            if field in metadata and metadata[field] is None:
                metadata[field] = ""

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
        if not validate_metadata(metadata):
            print(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            error_count += 1
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            with open(f"error_post_{post_id}.json", "w") as f:
                json.dump({"post": post, "metadata": metadata}, f, indent=2)
            continue

        vectors_to_upsert.append({
            "id": post_id,
            "values": embedding,
            "metadata": metadata
        })

    print(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –≤–µ–∫—Ç–æ—Ä–æ–≤: {len(vectors_to_upsert)}")
    print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: {error_count}")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–¥–Ω–æ–º—É –¥–ª—è —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    success_count = 0
    for i, vector_data in enumerate(vectors_to_upsert):
        try:
            # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–∫—Ç–æ—Ä–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
            print(f"\n–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–∞ {i + 1}/{len(vectors_to_upsert)}: {vector_data['id']}")
            print("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:", {k: type(v) for k, v in vector_data["metadata"].items()})

            # –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞
            index.upsert(vectors=[vector_data])
            success_count += 1
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –≤–µ–∫—Ç–æ—Ä
            with open(f"error_vector_{vector_data['id']}.json", "w") as f:
                json.dump(vector_data, f, indent=2)
            print("–ü—Ä–æ–±–ª–µ–º–Ω—ã–π –≤–µ–∫—Ç–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª")

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(0.1)

    print(f"\n–ò—Ç–æ–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏:")
    print(f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {success_count}")
    print(f"‚Ä¢ –û—à–∏–±–æ–∫: {len(vectors_to_upsert) - success_count}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    try:
        stats = index.describe_index_stats()
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞:")
        print(f"‚Ä¢ –í—Å–µ–≥–æ –≤–µ–∫—Ç–æ—Ä–æ–≤: {stats['total_vector_count']}")
        print(f"‚Ä¢ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {stats['dimension']}")

        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        if stats['total_vector_count'] > 0:
            print("\nüß™ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
            test_vector = vectors_to_upsert[0]["values"]
            test_results = index.query(
                vector=test_vector,
                top_k=3,
                include_metadata=True
            )

            print("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:")
            for match in test_results["matches"]:
                print(f"‚Ä¢ ID: {match['id']}, –°—Ö–æ–¥—Å—Ç–≤–æ: {match['score']:.4f}")
                print(f"  –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {list(match['metadata'].keys())}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


if __name__ == "__main__":
    main()